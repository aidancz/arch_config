# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ set
# set number
# set relativenumber
# set icons

set shellopts '-eu'	# see "man zshoptions"
set ifs "\n"		# internal field separater
set period 1
set hidden
set cleaner "~/.config/lf/cleaner"
# set cleaner "$XDG_CONFIG_HOME/lf/cleaner"
set previewer "~/.config/lf/scope"
# set previewer "$XDG_CONFIG_HOME/lf/scope"
set autoquit
# set sortby "ext"

set promptfmt "%u %h %d%f"
# set promptfmt "\033[32;1m   %u @ %h   \033[0m   :   \033[34;1m   %d   \033[0m   \033[1m   %f   \033[0m"
set statfmt "%p| %c| %u| %g| %S| (%t)| -> %l"
# set statfmt "\033[36m%p\033[0m| %c| %u| %g| %S| %t| -> %l"
set errorfmt "\033[30;41m"

# setlocal ~ hidden
# https://github.com/gokcehan/lf/issues/1403
# https://github.com/gokcehan/lf/pull/1381



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ cmd

# cmd on-cd &{{
# 	# display repository status in your prompt
# 	if [ -d .git ] || [ -f .git ]; then
# 		branch=$(git branch --show-current 2>/dev/null) || true
# 		remote=$(git config --get branch.$branch.remote 2>/dev/null) || true
# 		url=$(git remote get-url $remote 2>/dev/null) || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [GIT BRANCH:> $branch >> $url]\033[0m"
# 	elif [ -d .hg ]; then
# 		hg=$(hg branch 2>/dev/null) || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
# 	elif [ -d .svn ]; then
# 		svn=$(svn info 2>/dev/null | awk '/^URL: /{print $2}') || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
# 	else
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
# 	fi
# 	lf -remote "send $id set promptfmt \"$fmt\""
# }}
# # https://github.com/gokcehan/lf/wiki/Integrations#git

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	text/html) setsid -f $BROWSER --new-window $fx;;

	application/msword) setsid -f zaread $fx >/dev/null 2>&1 ;;
	application/vnd.ms-excel) setsid -f zaread $fx >/dev/null 2>&1 ;;
	application/vnd.ms-powerpoint) setsid -f zaread $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f zaread $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) setsid -f zaread $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.presentationml.presentation) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .doc .xls .ppt .docx .xlsx .pptx

	application/pdf) setsid -f zathura $fx >/dev/null 2>&1 ;;

	# inode/x-empty | text/* | application/*) emacsclient -nw -a "" $fx;;
	# inode/x-empty | text/* | application/*) devour emacsclient -c $fx;;
	# inode/x-empty | text/* | application/*) emacsclient -nw $fx;;
	# inode/x-empty | text/* | application/*) emacsclient -r -n $fx;;
	inode/x-empty | text/* | application/*) nvim $fx;;

	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
		setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

# cmd cdto ${{
# 	eval dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/mdf/mdir | fzf)" &&
# 	lf -remote "send $id cd $dest"
# }}
# https://github.com/LukeSmithxyz/voidrice/issues/831

cmd moveto ${{
	eval dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/mdf/mdir | fzf)" &&
	for x in $fx; do
		mv -iv "$x" "$dest"
	done
}}

cmd copyto ${{
	eval dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/mdf/mdir | fzf)" &&
	for x in $fx; do
		eval cp -ivr "$x" "$dest"
	done
}}



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ cmap
cmap <c-g> cmd-escape

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ map
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ basic
map c					# default: c -> clear, unmap it to use key sequence start with "c"
map t
map <f-3> quit
# map ; read

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ navigate
map g top
map <down> :updir; set dironly true; down; set dironly false; open
map <up>   :updir; set dironly true; up; set dironly false; open
map <c-o>  jump-prev
map <tab>  jump-next			# <tab> & <c-i>
map <left> $lf -remote "send $id cd $(git rev-parse --show-toplevel)"
map <a-f>  $lf -remote "send $id select \"$(fzf)\""

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ select
map <esc> :unselect; clear
map <c-g> :unselect; clear
map <c-a> invert

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ cp mv
map <a-c>	copyto

map <a-m>	moveto
map <a-d>	$trash-put $fx

map i  rename				# before extension
map a  push i<c-f>			# after extension
map I  push i<c-a>			# at the very beginning
map A  push i<c-e>			# at the very end
map cc push i<c-e><c-u>			# new rename
map cw push i<c-u>			# new rename (with extension)
map ci $vidir
# https://github.com/gokcehan/lf/issues/279
# https://github.com/gokcehan/lf/wiki/Tips#enhancing-the-rename-command

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ open
map o $mimeopen --ask "$f"

map <right> $sudo -e $fx
map v $nvim $fx
# map e $emacsclient -nw $fx
# map E $emacs -nw $fx
# map <c-e> $emacsclient -c $fx
# map <a-e> $emacs $fx

map <enter> $setsid -f $TERMINAL >/dev/null 2>&1
map <f-1>   $setsid -f $TERMINAL >/dev/null 2>&1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ file change
map <a-x> $chmod +x $f

# map <a-q>	$pandoc --wrap=preserve -f markdown -t org -o $(basename -s .md $f).org $f
# map <a-i>	$sed -Ezi 's/(:[^\n]+\n){3}/\n/g' $f; sed -Ei 's/^ {4}/\t/g' $f
map <a-q>	$pandoc --wrap=preserve --preserve-tabs=true -f org -t gfm -o $(basename -s .org $f).md $f

map <a-p>	$sed -e '0,/mixed-port/s/7890/8889/' -e '/external-controller/aexternal-ui: clash-dashboard' $f > ~/.config/clash/config.yaml

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ file use
map x		!$f
map <a-z>	$aunpack $fx
map <a-b>	$setbg $f

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ file info
map <a-y>	$printf "%s" "$fx" | xclip -selection clipboard
map <a-g>	!find . -maxdepth 1 -mindepth 1 -type d -exec sh -c "echo {}; cd {}; git status -s; echo" \;

map <a-a>	$clear; diff --color=always -u $fx $f | less -r
# map <a-a>	$clear; diff --color=always -u $f $fx | less -r
# https://stackoverflow.com/questions/4857310/how-to-get-diff-working-like-git-diff



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ source
source "~/.config/bookmarks_output/lf"
